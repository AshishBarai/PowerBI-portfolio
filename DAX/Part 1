Power BI measures are used to perform dynamic calculcation on your data 
model, often returning different results depending on the context of your 
report.

1. Using the SUM function

Syntax:
SUM(<column>)

Total quantity = SUM(Sales[quantity])

Explanation:
> SUM function: This function calculates the sum of the values in a column.
> sale[quantity]: this specifies the columns in the 'sales' tabke from which 
  the values will be summed

 ffectiveness:
> This measure is straightforwar and efficient for calculating the total 
  quantity of sales without any filtering or complex conditions.
> It is most effective when we want a simple aggregation of all values 
  in a column.

2. Using the CALCULATE function

Syntax:
CALCULATE(<expression>[, <filter1> [, <filter2> [, â€¦]]])

Total quantity using calculate = CALCULATE([total quantity], Customers[occupation] = "Professional")

Explanation:
> CALCULATE function: This function changes the context in which the date 
 is evaluated. It allows you to apply filters or modify the context for your
 calucaltions.
> [total quantity]: This refers to a previously defined which in this case could
 be sum(sales[quantity]).
>  Customers[occupation] = "Professional": This applies a filter to 
 only include rows where the occupation in the Customers table is 
 "Professional".

 Effectiveness:
 > CALCULATE is very powerful and versatile. It can change the 
  context of your calculations, making it effective for conditional 
  aggregations.
> It is useful when you need to apply specific filters dynamically, 
 such as filtering by customer occupation.

 3. Using FILTER Function

Syntax:
FILTER(<table>,<filter>)

Total quantity using filter = CALCULATE([total quantiy], FILTER(customers, Customers[occupation] = "professional"))

 Explanation:
 > FILTER function: This function returns a table that has been 
  filtered by the specified condition.
 >  FILTER(Customers, Customers[occupation] = "Professional"): 
  This creates a filtered table of Customers where the occupation 
  is "Professional".
 >  CALCULATE([Total quantity], ...): Here, the CALCULATE function 
  changes the context of [Total quantity] to only include rows from 
  the filtered table.

 Effectiveness:
 > Using FILTER within CALCULATE is effective for more complex 
  filtering conditions that cannot be directly applied in the 
  CALCULATE function.
> This approach is useful when you need to apply filters involving 
  multiple columns or more complex logical conditions.

4. Using the VALUES function

About VALUES:
When the input parameter is a column name, returns a one-column table 
that contains the distinct values from the specified column. Duplicate
values are removed and only unique values are returned. A BLANK value 
can be added. When the input parameter is a table name, returns the rows 
from the specified table. Duplicate rows are preserved. A BLANK row can be 
added.

Syntax:
VALUES(<TableNameOrColumnName>)

Total quantity using Values = CALCULATE([Total quantity], FILTER(VALUES(Customers[occupation]), Customers[occupation] = "Professional"))

Explanation:
> VALUES function: This function returns a one-column table that 
 contains the distinct values from the specified column.
> VALUES(Customers[occupation]): This creates a table with the 
 distinct occupations from the Customers table.
> FILTER(VALUES(...), ...): This filters the distinct values table 
 to only include "Professional".
> CALCULATE([Total quantity], ...): This uses the filtered context 
 to calculate [Total quantity].


Effectiveness
> The use of VALUES is effective for scenarios where you need to 
 work with distinct values of a column.
> It is particularly useful when dealing with relationships and 
 needing distinct values in a filter context.
